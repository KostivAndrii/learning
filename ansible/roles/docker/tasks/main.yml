---
# tasks file for docker
- name: Add group jenkins/aws
  group: name={{ aws_group }} state=present

- name: Add user jenkins/aws
  user: name={{ aws_user }} group={{ aws_group }}

- name: Install device-mapper-persistent-data
  yum:
    name: epel-release
    state: latest

- name: Install device-mapper-persistent-data
  yum:
    name: "{{ item }}"
    state: latest
  loop:
    [ epel-release, python-pip, yum-utils, device-mapper-persistent-data, lvm2, ansible ]
# , maven - moved into jenkins

- easy_install:
    name: pip
    state: latest

- name: Add Docker repo
  get_url:
    url: https://download.docker.com/linux/centos/docker-ce.repo
    dest: /etc/yum.repos.d/docer-ce.repo

- name: Enable Docker Edge repo
  ini_file:
    dest: /etc/yum.repos.d/docer-ce.repo
    section: 'docker-ce-edge'
    option: enabled
    value: 0

- name: Enable Docker Test repo
  ini_file:
    dest: /etc/yum.repos.d/docer-ce.repo
    section: 'docker-ce-test'
    option: enabled
    value: 0

- name: Install Docker
  package:
    name: "{{ item }}"
    state: latest
  loop:
    [ docker-ce, docker-ce-cli, containerd.io ]

- name: pip install docker-py and awscli
  pip:
    name: "{{ item }}"
  loop:
    [ docker-py, awscli, boto ]

- name: Create .aws directory
  file:
    path: /var/lib/jenkins/.aws
    state: directory
    mode: 0775
    owner: "{{ aws_user }}"
    group: "{{ aws_group }}"

- name: copying aws config file
  copy:
    src: "{{ item }}"
    dest: /var/lib/jenkins/.aws
    owner: "{{ aws_user }}"
    group: "{{ aws_group }}"
    mode: 0600
  loop:
    [ config, ec2.py, ec2.ini ]

- name: templating aws config file
  template:
    src: "{{ item }}"
    dest: /var/lib/jenkins/.aws/credentials
    owner: "{{ aws_user }}"
    group: "{{ aws_group }}"
    mode: 0600
  loop:
    [ credentials.j2, .credentials.j2 ]

- name: Start Docker service
  service:
    name: docker
    state: started
    enabled: yes
  become: yes

- name: Add user vagrant to docker group
  user:
    name: vagrant
    groups: docker
    append: yes
  become: yes

- name: pull an image
  docker_image:
    name: sonarqube

- name: $ docker run -d --name sonarqube -p 9000:9000 sonarqube
  docker_container:
    name: sonarqube
    image: sonarqube
    state: started
    ports:
     - "9000:9000"


AWSTemplateFormatVersion: 2010-09-09

Parameters:
  KeyName:
    Description: 'Optional key pair of the ec2-user to establish a SSH connection to the EC2 instance.'
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: '1'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Resources:

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: 10.0.0.0/16

  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24

  PublicRouteTables:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTables
      GatewayId: !Ref InternetGateway
    DependsOn:
      - EC2VPCG4UI66

  TomcatSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow access from HTTP and SSH traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

  EC2SRTA2KT4E:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTables
      SubnetId: !Ref PublicSubnet

  TomcatInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      KeyName: !Ref KeyName
      Tags:
        - Key: VM
          Value: Tomcat
      NetworkInterfaces:
        - GroupSet:
            - !Ref TomcatSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet
    DependsOn:
      - PublicRoute

  EC2VPCG4UI66:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}

Outputs:
 PublicIP:
   Description: Public IP address of the newly created EC2 instance
   Value: !GetAtt
     - TomcatInstance
     - PublicIp
 PublicDNS:
   Description: Public DNSName of the newly created EC2 instance
   Value: !GetAtt
     - TomcatInstance
     - PublicDnsName
 InstanceId:
   Description: InstanceId of the newly created EC2 instance
   Value: !Ref TomcatInstance
Mappings:
  RegionMap:
    'ap-south-1':
      AMI: 'ami-0937dcc711d38ef3f'
    'eu-west-3':
      AMI: 'ami-0854d53ce963f69d8'
    'eu-north-1':
      AMI: 'ami-6d27a913'
    'eu-west-2':
      AMI: 'ami-0664a710233d7c148'
    'eu-west-1':
      AMI: 'ami-0fad7378adf284ce0'
    'ap-northeast-2':
      AMI: 'ami-018a9a930060d38aa'
    'ap-northeast-1':
      AMI: 'ami-0d7ed3ddb85b521a6'
    'sa-east-1':
      AMI: 'ami-0b04450959586da29'
    'ca-central-1':
      AMI: 'ami-0de8b8e4bc1f125fe'
    'ap-southeast-1':
      AMI: 'ami-04677bdaa3c2b6e24'
    'ap-southeast-2':
      AMI: 'ami-0c9d48b5db609ad6e'
    'eu-central-1':
      AMI: 'ami-0eaec5838478eb0ba'
    'us-east-1':
      AMI: 'ami-035be7bafff33b6b6'
    'us-east-2':
      AMI: 'ami-04328208f4f0cf1fe'
    'us-west-1':
      AMI: 'ami-0799ad445b5727125'
    'us-west-2':
      AMI: 'ami-032509850cf9ee54e'