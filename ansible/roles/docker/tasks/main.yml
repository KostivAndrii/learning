---
# tasks file for docker
- name: Add group jenkins/aws
  group: name={{ aws_group }} state=present

- name: Add user jenkins/aws
  user: name={{ aws_user }} group={{ aws_group }}

- name: Install device-mapper-persistent-data
  yum:
    name: epel-release
    state: latest

- name: Install device-mapper-persistent-data
  yum:
    name: "{{ item }}"
    state: latest
  loop:
    [ epel-release, python-pip, yum-utils, device-mapper-persistent-data, lvm2, ansible ]
# , maven - moved into jenkins

- easy_install:
    name: pip
    state: latest

- name: Add Docker repo
  get_url:
    url: https://download.docker.com/linux/centos/docker-ce.repo
    dest: /etc/yum.repos.d/docer-ce.repo

- name: Enable Docker Edge repo
  ini_file:
    dest: /etc/yum.repos.d/docer-ce.repo
    section: 'docker-ce-edge'
    option: enabled
    value: 0

- name: Enable Docker Test repo
  ini_file:
    dest: /etc/yum.repos.d/docer-ce.repo
    section: 'docker-ce-test'
    option: enabled
    value: 0

- name: Install Docker
  package:
    name: "{{ item }}"
    state: latest
  loop:
    [ docker-ce, docker-ce-cli, containerd.io ]

- name: pip install docker-py and awscli
  pip:
    name: "{{ item }}"
  loop:
    [ docker-py, awscli, boto ]

- name: Create .aws directory
  file:
    path: /var/lib/jenkins/.aws
    state: directory
    mode: 0775
    owner: "{{ aws_user }}"
    group: "{{ aws_group }}"

- name: copying aws config file
  copy:
    src: "{{ item }}"
    dest: /var/lib/jenkins/.aws
    owner: "{{ aws_user }}"
    group: "{{ aws_group }}"
    mode: 0600
  loop:
    [ config, ec2.py, ec2.ini ]

- name: templating aws config file
  template:
    src: "{{ item }}"
    dest: /var/lib/jenkins/.aws/credentials
    owner: "{{ aws_user }}"
    group: "{{ aws_group }}"
    mode: 0600
  loop:
    [ credentials.j2, .credentials.j2 ]

- name: Start Docker service
  service:
    name: docker
    state: started
    enabled: yes
  become: yes

- name: Add user vagrant to docker group
  user:
    name: vagrant
    groups: docker
    append: yes
  become: yes

- name: pull an image
  docker_image:
    name: sonarqube

- name: $ docker run -d --name sonarqube -p 9000:9000 sonarqube
  docker_container:
    name: sonarqube
    image: sonarqube
    state: started
    ports:
     - "9000:9000"
